# Multi-stage Docker build for React application
FROM node:18-alpine as builder

WORKDIR /app

# Increase memory for Node.js build process
ENV NODE_OPTIONS=--max-old-space-size=8192

# Add build arguments for React environment variables
ARG REACT_APP_CLERK_PUBLISHABLE_KEY
ARG REACT_APP_LOGO_URL
ARG REACT_APP_BRAND_NAME
ARG REACT_APP_PROJECTS_LABEL
ARG REACT_APP_EDIT_PROJECTS_LABEL
ARG REACT_APP_PROJECTS_ROUTE
ARG REACT_APP_ENABLE_PROJECTS
ARG REACT_APP_KNOWLEDGE_BASE_LABEL
ARG REACT_APP_EDIT_KNOWLEDGE_BASE_LABEL
ARG REACT_APP_KNOWLEDGE_BASE_ROUTE
ARG REACT_APP_ENABLE_KNOWLEDGE_BASES
ARG REACT_APP_ENABLE_CHATS
ARG REACT_APP_CHAT_ROUTE
ARG REACT_APP_ENABLE_HISTORY
ARG REACT_APP_GOOGLE_ANALYTICS_ENABLE
ARG REACT_APP_GOOGLE_ANALYTICS_CODE
ARG REACT_APP_BASE_CEREBRUM_URL
ARG REACT_APP_BASE_LOCKSMIITH_URL
ARG REACT_APP_BASE_WAYNE_URL
ARG REACT_APP_BASE_ALAMANAC_URL

# Set environment variables from build args
ENV REACT_APP_CLERK_PUBLISHABLE_KEY=$REACT_APP_CLERK_PUBLISHABLE_KEY
ENV REACT_APP_LOGO_URL=$REACT_APP_LOGO_URL
ENV REACT_APP_BRAND_NAME=$REACT_APP_BRAND_NAME
ENV REACT_APP_PROJECTS_LABEL=$REACT_APP_PROJECTS_LABEL
ENV REACT_APP_EDIT_PROJECTS_LABEL=$REACT_APP_EDIT_PROJECTS_LABEL
ENV REACT_APP_PROJECTS_ROUTE=$REACT_APP_PROJECTS_ROUTE
ENV REACT_APP_ENABLE_PROJECTS=$REACT_APP_ENABLE_PROJECTS
ENV REACT_APP_KNOWLEDGE_BASE_LABEL=$REACT_APP_KNOWLEDGE_BASE_LABEL
ENV REACT_APP_EDIT_KNOWLEDGE_BASE_LABEL=$REACT_APP_EDIT_KNOWLEDGE_BASE_LABEL
ENV REACT_APP_KNOWLEDGE_BASE_ROUTE=$REACT_APP_KNOWLEDGE_BASE_ROUTE
ENV REACT_APP_ENABLE_KNOWLEDGE_BASES=$REACT_APP_ENABLE_KNOWLEDGE_BASES
ENV REACT_APP_ENABLE_CHATS=$REACT_APP_ENABLE_CHATS
ENV REACT_APP_CHAT_ROUTE=$REACT_APP_CHAT_ROUTE
ENV REACT_APP_ENABLE_HISTORY=$REACT_APP_ENABLE_HISTORY
ENV REACT_APP_GOOGLE_ANALYTICS_ENABLE=$REACT_APP_GOOGLE_ANALYTICS_ENABLE
ENV REACT_APP_GOOGLE_ANALYTICS_CODE=$REACT_APP_GOOGLE_ANALYTICS_CODE
ENV REACT_APP_BASE_CEREBRUM_URL=$REACT_APP_BASE_CEREBRUM_URL
ENV REACT_APP_BASE_LOCKSMIITH_URL=$REACT_APP_BASE_LOCKSMIITH_URL
ENV REACT_APP_BASE_WAYNE_URL=$REACT_APP_BASE_WAYNE_URL
ENV REACT_APP_BASE_ALAMANAC_URL=$REACT_APP_BASE_ALAMANAC_URL

# Copy package files first for better Docker layer caching
COPY package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci && npm cache clean --force

# Copy source code
COPY . .

# Build the React application
RUN npm run build

# Stage 2: Production runtime
FROM node:18-alpine

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S reactapp -u 1001

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Copy server files
COPY server.js config.js security-config.js ./

# Create SSL directory (optional, for development)
RUN mkdir -p ssl

# Change ownership to non-root user
RUN chown -R reactapp:nodejs /app

# Switch to non-root user
USER reactapp

# Expose the application port
EXPOSE 4000

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://127.0.0.1:4000/_healthz', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server.js"]